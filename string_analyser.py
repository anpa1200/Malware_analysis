import re

# Predefined lists
windows_API_commands = [
    "CreateWindowEx", "DefWindowProc", "DispatchMessage", "GetMessage", "PostQuitMessage",
    "RegisterClassEx", "TranslateMessage", "BeginPaint", "EndPaint", "GetClientRect",
    "LoadCursor", "LoadIcon", "PostMessage", "SendMessage", "SetWindowText",
    "GetWindowText", "DrawText", "UpdateWindow", "CreateBrushIndirect", "CreateFontIndirect",
    "CreatePen", "DeleteObject", "GetStockObject", "SelectObject", "BitBlt",
    "CreateCompatibleBitmap", "CreateCompatibleDC", "DeleteDC", "GetDeviceCaps", "SetStretchBltMode",
    "StretchBlt", "TextOut", "GetTextExtentPoint32", "Ellipse", "Polygon",
    "Rectangle", "RoundRect", "CreateFile", "ReadFile", "WriteFile",
    "CloseHandle", "SetFilePointer", "FlushFileBuffers", "GetFileSize", "GetFileAttributes",
    "SetFileAttributes", "DeleteFile", "MoveFile", "CopyFile", "CreateDirectory",
    "RemoveDirectory", "GetDiskFreeSpace", "GetVolumeInformation", "FindFirstFile", "FindNextFile",
    "FindClose", "GetCurrentDirectory", "SetCurrentDirectory", "GetTempPath", "GetTempFileName",
    "SetEndOfFile", "DeviceIoControl", "GlobalAlloc", "GlobalFree", "GlobalLock",
    "GlobalUnlock", "GlobalSize", "LocalAlloc", "LocalFree", "LocalLock",
    "LocalUnlock", "LocalSize", "VirtualAlloc", "VirtualFree", "VirtualQuery",
    "VirtualProtect", "HeapCreate", "HeapDestroy", "HeapAlloc", "HeapFree",
    "HeapSize", "HeapLock", "HeapUnlock", "HeapCompact", "HeapValidate",
    "HeapWalk", "GetProcessHeap", "GetProcAddress", "LoadLibrary", "FreeLibrary",
    "ExitProcess", "GetModuleHandle", "WaitForSingleObject", "CreateThread", "CreateProcess",
    "GetCurrentProcess", "GetCurrentThread", "GetExitCodeProcess", "GetExitCodeThread", "GetStartupInfo",
    "OpenProcess", "TerminateProcess", "TerminateThread", "SuspendThread", "ResumeThread",
    "CloseHandle", "SetHandleInformation", "DuplicateHandle", "GetStdHandle", "SetStdHandle",
    "IsDebuggerPresent", "DebugBreak", "OutputDebugString", "ContinueDebugEvent", "WaitForDebugEvent",
    "SetThreadContext", "GetThreadContext", "ReadProcessMemory", "WriteProcessMemory", "CreateRemoteThread",
    "DebugActiveProcess", "GetLastError", "SetLastError", "FormatMessage", "LocalFree",
    "Sleep", "GetTickCount", "QueryPerformanceCounter", "QueryPerformanceFrequency", "GetCurrentThreadId",
    "GetCurrentProcessId", "SetUnhandledExceptionFilter", "IsProcessorFeaturePresent", "GetSystemTime", "SetSystemTime",
    "GetLocalTime", "SetLocalTime", "GetSystemTimeAdjustment", "GetSystemVersion", "GetSystemDirectory",
    "GetWindowsDirectory", "GetDriveType", "GetSystemInfo", "SystemParametersInfo", "GetUserName",
    "GetComputerName", "GetVersionEx", "OutputDebugString", "GetPrivateProfileString", "WritePrivateProfileString",
    "GetPrivateProfileInt", "WritePrivateProfileSection", "GetProfileString", "WriteProfileString", "GetProfileInt"
]

cmd_command_list = [
    "assoc", "attrib", "bcdedit", "cd", "chkdsk", "cls", "copy", "del", "dir", "diskpart",
    "driverquery", "echo", "exit", "find", "findstr", "format", "help", "ipconfig", "md", "more",
    "move", "net", "netstat", "nslookup", "path", "ping", "powercfg", "rd", "reg", "regedit",
    "rename", "rmdir", "robocopy", "route", "sc", "sfc", "shutdown", "sort", "start", "systeminfo",
    "taskkill", "tasklist", "time", "timeout", "title", "tree", "type", "ver", "vol", "xcopy"
]
#most common dll functions
functions_list = [
    "CreateFileW", "CloseHandle", "ReadFile", "WriteFile", "SetFilePointer",
    "GetFileSize", "DeleteFileW", "MoveFileW", "CopyFileW", "GetFileAttributesW",
    "SetFileAttributesW", "LoadLibraryW", "GetProcAddress", "FreeLibrary", "OpenProcess",
    "GetLastError", "SetLastError", "GlobalAlloc", "GlobalFree", "VirtualAlloc",
    "VirtualFree", "HeapAlloc", "HeapFree", "InitializeCriticalSection", "DeleteCriticalSection",
    "EnterCriticalSection", "LeaveCriticalSection", "CreateMutexW", "ReleaseMutex", "WaitForSingleObject",
    "CreateEventW", "SetEvent", "ResetEvent", "GetModuleHandleW", "GetModuleFileNameW",
    "TerminateProcess", "ExitProcess", "GetProcessHeap", "HeapSize", "HeapReAlloc",
    "LoadLibraryExW", "IsDebuggerPresent", "QueryPerformanceCounter", "GetCurrentProcess", "GetSystemTimeAsFileTime",
    "GetTickCount", "Sleep", "MultiByteToWideChar", "WideCharToMultiByte", "RegOpenKeyExW",
    "RegCloseKey", "RegQueryValueExW", "RegSetValueExW", "RegDeleteValueW", "RegCreateKeyExW",
    "FindResourceW", "LoadResource", "SizeofResource", "CreateThread", "TerminateThread",
    "GetExitCodeThread", "GetThreadContext", "SetThreadContext", "SuspendThread", "ResumeThread",
    "CreateWindowExW", "ShowWindow", "UpdateWindow", "DefWindowProcW", "GetMessageW",
    "TranslateMessage", "DispatchMessageW", "PostQuitMessage", "PostMessageW", "SendMessageW",
    "SetWindowTextW", "GetWindowTextW", "LoadCursorW", "SetCursor", "InvalidateRect",
    "BeginPaint", "EndPaint", "GetDC", "ReleaseDC", "GetClientRect",
    "DestroyWindow", "RegisterClassExW", "LoadIconW", "LoadMenuW", "CreatePopupMenu",
    "AppendMenuW", "TrackPopupMenu", "GetCursorPos", "SetMenu", "GetSubMenu",
    "ShellExecuteW", "DialogBoxParamW", "EndDialog", "GetDlgItem", "SetDlgItemTextW",
    "GetDlgItemTextW", "MessageBeep", "MessageBoxW", "OpenClipboard", "CloseClipboard",
    "EmptyClipboard", "SetClipboardData", "GetClipboardData", "RegisterClipboardFormatW", "IsClipboardFormatAvailable",
    "FindWindowW", "GetWindowRect", "MoveWindow", "SetTimer", "KillTimer",
    "GetSystemMetrics", "ClientToScreen", "ScreenToClient", "GetDesktopWindow", "SetForegroundWindow",
    "GetForegroundWindow", "IsWindowVisible", "ShowCursor", "SetCapture", "ReleaseCapture",
    "MapVirtualKeyW", "GetKeyState", "GetAsyncKeyState", "SendMessageTimeoutW", "DrawTextW",
    "BeginPath", "EndPath", "StrokeAndFillPath", "TextOutW", "ExtTextOutW",
    "CreatePen", "DeleteObject", "SelectObject", "MoveToEx", "LineTo",
    "Rectangle", "Ellipse", "CreateSolidBrush", "CreateFontIndirectW", "SetTextColor",
    "SetBkColor", "SetBkMode", "GetStockObject", "CreateCompatibleDC", "DeleteDC",
    "BitBlt", "StretchBlt", "SaveDC", "RestoreDC", "CreateCompatibleBitmap",
    "GetObjectW", "GetCurrentObject", "SetPixel", "GetPixel", "CreateBitmap",
    "PlaySoundW", "WaveOutGetNumDevs", "WaveOutGetDevCapsW", "WaveOutOpen", "WaveOutClose",
    "WaveOutPrepareHeader", "WaveOutUnprepareHeader", "WaveOutWrite", "WaveOutGetPosition", "WaveOutSetVolume",
    "CoInitialize", "CoUninitialize", "CoCreateInstance", "CoTaskMemAlloc", "CoTaskMemFree"
]

# Regex patterns
url_pattern = url_pattern = re.compile(r'^(http:\/\/|https:\/\/|ftp:\/\/|ftps:\/\/|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$')
ip_pattern = re.compile(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
path_pattern = re.compile(r'[^\\/:*?"<>|\r\n]+(?:\\[^\\/:*?"<>|\r\n]+){2,}(?:\\[^\\/:*?"<>|\r\n]+\.\w+)?')
dll_pattern = re.compile(r"^.+\.dll$")
file_pattern = re.compile(r'([^\\/:*?"<>|\r\n]+)\.(exe|bat|cmd|vbs|txt|log|ini|reg|msi|sys|inf|drv|com|cpl|scr|hlp|ico|lnk)$', re.IGNORECASE)

# Output lists
windows_API_commands_found = []
dlls_found = []
urls_found = []
ips_found = []
cmd_found = []
files_found = []
paths_found = []
long_lines = []
functions_found = []

def extract_strings(filename, min_length=4):
    with open(filename, 'rb') as f:
        result = []
        current_string = ""

        while True:
            byte = f.read(1)
            if byte:
                # Check if the byte is a printable ASCII character
                if 32 <= ord(byte) <= 126:
                    current_string += byte.decode('ascii', 'ignore')
                else:
                    if len(current_string) >= min_length:
                        result.append(current_string)
                    current_string = ""
            else:
                if len(current_string) >= min_length:
                    result.append(current_string)
                break

    return result

filename = input("Path to file: ")
file = (extract_strings(filename))
for line in file:
    if line in windows_API_commands:
        windows_API_commands_found.append(line)
    if line in functions_list:
        functions_found.append(line)
    elif dll_pattern.match(line):
        dlls_found.append(line)
    elif url_pattern.match(line):
        urls_found.append(line)
    elif path_pattern.match(line):
        paths_found.append(line)
    elif ip_pattern.match(line):
        ips_found.append(line)
    elif file_pattern.match(line):
        files_found.append(line)
    elif line in cmd_command_list:
        cmd_found.append(line)
    elif len(line) > 12 and len(line)< 30:
        long_lines.append(line)


# Print the results
print("Windows API Commands Found:", windows_API_commands_found)
print("DLLs Found:", dlls_found)
print("URLs Found:", urls_found)
print("IPs Found:", ips_found)
print("CMD Commands Found:", cmd_found)
print("Path Found:", paths_found)
print("Files Found:", files_found)
print("Functions Found:", functions_found)
print("Long lines found:",long_lines)

# Save the results to strings.txt
with open("/home/andrey/strings.txt", "w", encoding="utf-8") as out_file:
    if windows_API_commands_found:
        out_file.write("WINDOWS_API_COMMANDS\n")
        out_file.write("\n".join(windows_API_commands_found) + "\n\n")
    if dlls_found:
        out_file.write("DLLS\n")
        out_file.write("\n".join(dlls_found) + "\n\n")
    if urls_found:
        out_file.write("URLS\n")
        out_file.write("\n".join(urls_found) + "\n\n")
    if ips_found:
        out_file.write("IPS\n")
        out_file.write("\n".join(ips_found) + "\n\n")
    if cmd_found:
        out_file.write("CMD_COMMANDS\n")
        out_file.write("\n".join(cmd_found) + "\n\n")
    if paths_found:
        out_file.write("PATHS\n")
        out_file.write("\n".join(paths_found) + "\n\n")
    if files_found:
        out_file.write("FILES\n")
        out_file.write("\n".join(files_found) + "\n\n")
    if functions_found:
        out_file.write("FUNCTIONS\n")
        out_file.write("\n".join(functions_found) + "\n\n")
    if long_lines:
        out_file.write("LONG_LINES\n")
        out_file.write("\n".join(long_lines) + "\n")
