#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <regex>
#include <algorithm>
#include <conio.h>

using namespace std;

// Predefined lists
const vector<string> WIN_API = {
    "CreateWindowEx", "DefWindowProc", "DispatchMessage", "GetMessage", "PostQuitMessage",
    "RegisterClassEx", "TranslateMessage", "BeginPaint", "EndPaint", "GetClientRect",
    "LoadCursor", "LoadIcon", "PostMessage", "SendMessage", "SetWindowText",
    "GetWindowText", "DrawText", "UpdateWindow", "CreateBrushIndirect", "CreateFontIndirect",
    "CreatePen", "DeleteObject", "GetStockObject", "SelectObject", "BitBlt",
    "CreateCompatibleBitmap", "CreateCompatibleDC", "DeleteDC", "GetDeviceCaps", "SetStretchBltMode",
    "StretchBlt", "TextOut", "GetTextExtentPoint32", "Ellipse", "Polygon",
    "Rectangle", "RoundRect", "CreateFile", "ReadFile", "WriteFile",
    "CloseHandle", "SetFilePointer", "FlushFileBuffers", "GetFileSize", "GetFileAttributes",
    "SetFileAttributes", "DeleteFile", "MoveFile", "CopyFile", "CreateDirectory",
    "RemoveDirectory", "GetDiskFreeSpace", "GetVolumeInformation", "FindFirstFile", "FindNextFile",
    "FindClose", "GetCurrentDirectory", "SetCurrentDirectory", "GetTempPath", "GetTempFileName",
    "SetEndOfFile", "DeviceIoControl", "GlobalAlloc", "GlobalFree", "GlobalLock",
    "GlobalUnlock", "GlobalSize", "LocalAlloc", "LocalFree", "LocalLock",
    "LocalUnlock", "LocalSize", "VirtualAlloc", "VirtualFree", "VirtualQuery",
    "VirtualProtect", "HeapCreate", "HeapDestroy", "HeapAlloc", "HeapFree",
    "HeapSize", "HeapLock", "HeapUnlock", "HeapCompact", "HeapValidate",
    "HeapWalk", "GetProcessHeap", "GetProcAddress", "LoadLibrary", "FreeLibrary",
    "ExitProcess", "GetModuleHandle", "WaitForSingleObject", "CreateThread", "CreateProcess",
    "GetCurrentProcess", "GetCurrentThread", "GetExitCodeProcess", "GetExitCodeThread", "GetStartupInfo",
    "OpenProcess", "TerminateProcess", "TerminateThread", "SuspendThread", "ResumeThread",
    "CloseHandle", "SetHandleInformation", "DuplicateHandle", "GetStdHandle", "SetStdHandle",
    "IsDebuggerPresent", "DebugBreak", "OutputDebugString", "ContinueDebugEvent", "WaitForDebugEvent",
    "SetThreadContext", "GetThreadContext", "ReadProcessMemory", "WriteProcessMemory", "CreateRemoteThread",
    "DebugActiveProcess", "GetLastError", "SetLastError", "FormatMessage", "LocalFree",
    "Sleep", "GetTickCount", "QueryPerformanceCounter", "QueryPerformanceFrequency", "GetCurrentThreadId",
    "GetCurrentProcessId", "SetUnhandledExceptionFilter", "IsProcessorFeaturePresent", "GetSystemTime", "SetSystemTime",
    "GetLocalTime", "SetLocalTime", "GetSystemTimeAdjustment", "GetSystemVersion", "GetSystemDirectory",
    "GetWindowsDirectory", "GetDriveType", "GetSystemInfo", "SystemParametersInfo", "GetUserName",
    "GetComputerName", "GetVersionEx", "OutputDebugString", "GetPrivateProfileString", "WritePrivateProfileString",
    "GetPrivateProfileInt", "WritePrivateProfileSection", "GetProfileString", "WriteProfileString", "GetProfileInt"
};

const vector<string> FUNCTIONS_LIST = {
    "CreateFileW", "CloseHandle", "ReadFile", "WriteFile", "SetFilePointer",
    "GetFileSize", "DeleteFileW", "MoveFileW", "CopyFileW", "GetFileAttributesW",
    "SetFileAttributesW", "LoadLibraryW", "GetProcAddress", "FreeLibrary", "OpenProcess",
    "GetLastError", "SetLastError", "GlobalAlloc", "GlobalFree", "VirtualAlloc",
    "VirtualFree", "HeapAlloc", "HeapFree", "InitializeCriticalSection", "DeleteCriticalSection",
    "EnterCriticalSection", "LeaveCriticalSection", "CreateMutexW", "ReleaseMutex", "WaitForSingleObject",
    "CreateEventW", "SetEvent", "ResetEvent", "GetModuleHandleW", "GetModuleFileNameW",
    "TerminateProcess", "ExitProcess", "GetProcessHeap", "HeapSize", "HeapReAlloc",
    "LoadLibraryExW", "IsDebuggerPresent", "QueryPerformanceCounter", "GetCurrentProcess", "GetSystemTimeAsFileTime",
    "GetTickCount", "Sleep", "MultiByteToWideChar", "WideCharToMultiByte", "RegOpenKeyExW",
    "RegCloseKey", "RegQueryValueExW", "RegSetValueExW", "RegDeleteValueW", "RegCreateKeyExW",
    "FindResourceW", "LoadResource", "SizeofResource", "CreateThread", "TerminateThread",
    "GetExitCodeThread", "GetThreadContext", "SetThreadContext", "SuspendThread", "ResumeThread",
    "CreateWindowExW", "ShowWindow", "UpdateWindow", "DefWindowProcW", "GetMessageW",
    "TranslateMessage", "DispatchMessageW", "PostQuitMessage", "PostMessageW", "SendMessageW",
    "SetWindowTextW", "GetWindowTextW", "LoadCursorW", "SetCursor", "InvalidateRect",
    "BeginPaint", "EndPaint", "GetDC", "ReleaseDC", "GetClientRect",
    "DestroyWindow", "RegisterClassExW", "LoadIconW", "LoadMenuW", "CreatePopupMenu",
    "AppendMenuW", "TrackPopupMenu", "GetCursorPos", "SetMenu", "GetSubMenu",
    "ShellExecuteW", "DialogBoxParamW", "EndDialog", "GetDlgItem", "SetDlgItemTextW",
    "GetDlgItemTextW", "MessageBeep", "MessageBoxW", "OpenClipboard", "CloseClipboard",
    "EmptyClipboard", "SetClipboardData", "GetClipboardData", "RegisterClipboardFormatW", "IsClipboardFormatAvailable",
    "FindWindowW", "GetWindowRect", "MoveWindow", "SetTimer", "KillTimer",
    "GetSystemMetrics", "ClientToScreen", "ScreenToClient", "GetDesktopWindow", "SetForegroundWindow",
    "GetForegroundWindow", "IsWindowVisible", "ShowCursor", "SetCapture", "ReleaseCapture",
    "MapVirtualKeyW", "GetKeyState", "GetAsyncKeyState", "SendMessageTimeoutW", "DrawTextW",
    "BeginPath", "EndPath", "StrokeAndFillPath", "TextOutW", "ExtTextOutW",
    "CreatePen", "DeleteObject", "SelectObject", "MoveToEx", "LineTo",
    "Rectangle", "Ellipse", "CreateSolidBrush", "CreateFontIndirectW", "SetTextColor",
    "SetBkColor", "SetBkMode", "GetStockObject", "CreateCompatibleDC", "DeleteDC",
    "BitBlt", "StretchBlt", "SaveDC", "RestoreDC", "CreateCompatibleBitmap",
    "GetObjectW", "GetCurrentObject", "SetPixel", "GetPixel", "CreateBitmap",
    "PlaySoundW", "WaveOutGetNumDevs", "WaveOutGetDevCapsW", "WaveOutOpen", "WaveOutClose",
    "WaveOutPrepareHeader", "WaveOutUnprepareHeader", "WaveOutWrite", "WaveOutGetPosition", "WaveOutSetVolume",
    "CoInitialize", "CoUninitialize", "CoCreateInstance", "CoTaskMemAlloc", "CoTaskMemFree"
};

const vector<string> CMD_COMMAND_LIST = {
    "assoc", "attrib", "bcdedit", "cd", "chkdsk", "cls", "copy", "del", "dir", "diskpart",
    "driverquery", "echo", "exit", "find", "findstr", "format", "help", "ipconfig", "md", "more",
    "move", "net", "netstat", "nslookup", "path", "ping", "powercfg", "rd", "reg", "regedit",
    "rename", "rmdir", "robocopy", "route", "sc", "sfc", "shutdown", "sort", "start", "systeminfo",
    "taskkill", "tasklist", "time", "timeout", "title", "tree", "type", "ver", "vol", "xcopy"
};
vector<string> getStrings(const string& filename) {
    ifstream file(filename, ios::binary);
    if (!file) {
        cerr << "Error opening file!" << endl;
        return {};
    }

    vector<string> result;
    string current_string;
    char ch;

    while (file.get(ch)) {
        if (ch >= 32 && ch <= 126) {
            current_string += ch;
        }
        else {
            if (current_string.size() >= 4) {
                result.push_back(current_string);
            }
            current_string.clear();
        }
    }

    if (current_string.size() >= 4) {
        result.push_back(current_string);
    }

    return result;
}

int main() {
    string filepath;
    cout << "Welcome to String Analyser!" << endl;
    cout << "Path to suspicious file: ";
    cin >> filepath;

    const vector<string> extractedStrings = getStrings(filepath);

    vector<string> foundAPI;
    vector<string> foundFunctions;
    vector<string> foundURL;
    vector<string> foundDLL;
    vector<string> foundIP;
    vector<string> foundPath;
    vector<string> foundFile;
    vector<string> foundCommands;

    regex url_pattern(R"((http:\/\/|https:\/\/|ftp:\/\/|ftps:\/\/|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$)");
    regex ip_pattern(R"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))");
    regex path_pattern(R"([^\\/:*?"<>|\r\n]+(?:\\[^\\/:*?"<>|\r\n]+){2,}(?:\\[^\\/:*?"<>|\r\n]+\.\w+)?)");
    regex dll_pattern(R"(^.+\.dll$)");
    regex file_pattern(R"(([^\\/:*?"<>|\r\n]+)\.(exe|bat|cmd|vbs|txt|log|ini|reg|msi|sys|inf|drv|com|cpl|scr|hlp|ico|lnk))", regex::icase);

    for (const string& str : extractedStrings) {
        if (find(WIN_API.begin(), WIN_API.end(), str) != WIN_API.end()) {
            foundAPI.push_back(str);
        }

        if (find(FUNCTIONS_LIST.begin(), FUNCTIONS_LIST.end(), str) != FUNCTIONS_LIST.end()) {
            foundFunctions.push_back(str);
        }

        if (find(CMD_COMMAND_LIST.begin(), CMD_COMMAND_LIST.end(), str) != CMD_COMMAND_LIST.end()) {
            foundCommands.push_back(str);
        }

        if (regex_search(str, url_pattern)) {
            foundURL.push_back(str);
        }

        if (regex_search(str, ip_pattern)) {
            foundIP.push_back(str);
        }

        if (regex_search(str, path_pattern)) {
            foundPath.push_back(str);
        }

        if (regex_search(str, dll_pattern)) {
            foundDLL.push_back(str);
        }

        if (regex_search(str, file_pattern)) {
            foundFile.push_back(str);
        }
    }

    // Save results
    cout << "Now programm will create a file with results. Enter path and name of file (include .txt)" << endl;
    cout << "Path to file with results: ";
    string result_path;
    cin >> result_path;

    ofstream out_file(result_path);
    if (!out_file) {
        cerr << "Error opening output file!" << endl;
        return 1;
    }

    out_file << "WINDOWS API:\n";
    for (const string& api : foundAPI) {
        out_file << api << "\n";
    }

    out_file << "\nFUNCTIONS:\n";
    for (const string& susp_str : foundFunctions) {
        out_file << susp_str << "\n";
    }

    out_file << "\nCOMMANDS:\n";
    for (const string& commands : foundCommands) {
        out_file << commands << "\n";
    }

    out_file << "\nURLS:\n";
    for (const string& url : foundURL) {
        out_file << url << "\n";
    }

    out_file << "\nIPs:\n";
    for (const string& ip : foundIP) {
        out_file << ip << "\n";
    }

    out_file << "\nPATHS:\n";
    for (const string& path : foundPath) {
        out_file << path << "\n";
    }

    out_file << "\nDLLS:\n";
    for (const string& dll : foundDLL) {
        out_file << dll << "\n";
    }

    out_file << "\nFILES:\n";
    for (const string& file : foundFile) {
        out_file << file << "\n";
    }


    cout << "Analysis completed! Check the result file for results." << endl;
    cout << "Thank you for using String Analyser!" << endl;
    cout << "Created by Andrey Pautov: 1200km@gmail.com" << endl;
    cout << "Press any key to close" << endl;
    _getch();
    return 0;
}
